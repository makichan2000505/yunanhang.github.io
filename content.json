[{"title":"EJS搭建一个静态网页","slug":null,"date":"2016-05-29T09:44:56.000Z","updated":null,"comments":null,"path":"2016/05/29/EJS搭建一个静态网页/","link":null,"permalink":null,"excerpt":null,"keywords":null,"text":"使用express+ejs搭建一个网站实例过程1.创建项目文件夹works 安装express+ejs 1$ express -e 安装依赖包 1$ npm install 安装完成后目录结构如下： 打开views文件夹，在里面新建两个文件夹，一个名为patials，用来存放页面的各个模块。另一个为pages，用来引入patials里的模块。 在patials里新建head.ejs,header.ejs,foot.ejs。写些简单的HTML代码。 12345678910//head.ejs&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;head&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;&gt;&lt;style&gt; body &#123; padding-top:50px; &#125;&lt;/style&gt; 123456789101112131415161718//header.ejs&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt; &lt;span class=&quot;glyphicon glyphicon glyphicon-tree-deciduous&quot;&gt;&lt;/span&gt; 使用express+ejs搭建一个网站实例过程 &lt;/a&gt; &lt;/div&gt; &lt;ul class=&quot;nav navbar-nav&quot;&gt; &lt;li&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/about&quot;&gt;关于&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/nav&gt; 12//footer.ejs&lt;p class=&quot;text-center text-muted&quot;&gt;@ Copyright 2016 SilencePort&lt;/p&gt; 接着在pages文件夹里创建index.ejs用来显示首页,about.ejs来显示”关于”页面.1234567891011121314151617181920212223242526272829303132333435//index.ejs&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;% include ../partials/head %&gt;&lt;/head&gt;&lt;body class=&quot;container&quot;&gt; &lt;header&gt; &lt;% include ../partials/header %&gt; &lt;/header&gt; &lt;main&gt; &lt;div class=&quot;jumbotron&quot;&gt; &lt;h1&gt;湖北工业大学&lt;/h1&gt; &lt;p&gt;欢迎进入计算机学院&lt;/p&gt; &lt;/div&gt; &lt;h2&gt;软件二班&lt;/h2&gt; &lt;p&gt;&lt;%= tagline %&gt;&lt;/p&gt; &lt;h2&gt;好基友&lt;/h2&gt; &lt;ul&gt; &lt;% guys.forEach(function(guy) &#123; %&gt; &lt;li&gt;&lt;%= guy.name %&gt; - &lt;%= guy.age %&gt;&lt;/li&gt; &lt;% &#125;);%&gt; &lt;/ul&gt; &lt;/main&gt; &lt;footer&gt; &lt;% include ../partials/footer %&gt; &lt;/footer&gt; &lt;/body&gt;&lt;/html&gt; 1234567891011121314151617181920212223242526272829303132333435363738//about.ejs&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;% include ../partials/head %&gt;&lt;/head&gt;&lt;body class=&quot;container&quot;&gt; &lt;header&gt; &lt;% include ../partials/header %&gt; &lt;/header&gt; &lt;main&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-sm-8&quot;&gt; &lt;div class=&quot;jumbotron&quot;&gt; &lt;h1&gt;西区18栋&lt;/h1&gt; &lt;p&gt;欢迎来到512&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;div class=&quot;well&quot;&gt; &lt;h3&gt;敌军还有30秒到达战场，碾碎他们!&lt;/h3&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/main&gt; &lt;footer&gt; &lt;% include ../partials/footer %&gt; &lt;/footer&gt; &lt;/body&gt;&lt;/html&gt; 在app.js里添加渲染函数 123456789101112131415161718192021//渲染页面aboutapp.get(&apos;/about&apos;, function (req, res) &#123; res.render(&apos;pages/about&apos;);&#125;);//获取数据到indexapp.get(&apos;/&apos;, function (req, res) &#123; var guys = [ &#123; name: &apos;喻南航&apos;, age: 22 &#125;, &#123; name: &apos;李玉明&apos;, age: 23 &#125;, &#123; name: &apos;徐冬冬&apos;, age: 21 &#125; ]; var tagline = &quot;一入联盟深似海，从此代码是路人&quot;; res.render(&apos;pages/index&apos;, &#123; guys: guys, tagline: tagline &#125;);&#125;);//设置端口app.listen(8080);console.log(&apos;http://localhost:8080 is running&apos;); 运行app.js，浏览器输入http://localhost:8080 1$ node app.js 进入网页发现中文显示乱码 ++这是由于express生成的app.js的默认编码不是utf-8造成的++ 解决方法 将app.js 及所有ejs文件用记事本打开，然后另存为UTF-8格式 再次运行1$ node app.js 这次页面中文正常显示了 学习心得自从买了VPN后，都用google在找教程，不得不承认国外程序员写文章，思路比国人要清晰得多，这点值得我们学习。","raw":null,"content":null,"categories":null,"tags":[]},{"title":"测试图片显示","slug":null,"date":"2016-05-28T11:33:33.000Z","updated":null,"comments":null,"path":"2016/05/28/测试图片显示/","link":null,"permalink":null,"excerpt":null,"keywords":null,"text":"","raw":null,"content":null,"categories":null,"tags":[{"name":"相册","slug":"相册","permalink":"http://yoursite.com/tags/相册/"}]},{"title":"Node.js+Express+EJS入门笔记","slug":null,"date":"2016-05-27T10:10:11.000Z","updated":null,"comments":null,"path":"2016/05/27/Node.js+Express+EJS入门笔记/","link":null,"permalink":null,"excerpt":null,"keywords":null,"text":"Node.js+Express+EJS入门笔记标签（空格分隔）： 未分类 什么是EJSEJS的优势就是，我们可以使用它来给页面创建局部的视图。举个例子，你可以让所有页面使用公共的头部，脚部，和导航栏，并且只需用EJS改变页面里的内容。你也可以把数据传到视图里，举个例子，每个用户都有不同的用户名。使用EJS，可以这样改变页面里的用户名显示。123app.get(&apos;/&apos;,function(req,res)&#123;res.render(&apos;index&apos;,&#123;user:“Gone Lee”&#125;)&#125;); 这样在每次加载index页面时，会动态地调用不同的用户名并显示出来。以名字为例，你能够使用JavaScript来生成HTML和EJS。 创建一个简单的EJS模块。 在你的项目里创建一个视图文件夹。 创建一个index.ejs 12345678&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;welcome &lt;%= user%&gt;;&lt;/body&gt;&lt;/html&gt; 搞定，现在你已经用EJS创建你的第一个模块了。代码中&lt;%= title %&gt;的作用是绑定了一个标题，稍后有详细解释。现在你该做的是使用EJS view engine（EJS的视图引擎）从你的node服务器来渲染这个index.ejs。 渲染EJS 创建一个 server.js 文件，并安装ejs 模板 创建你的express app实例 12345678var express = require(&apos;express&apos;); var app = express();Now, Inside you server.js set the view Engine to ejs as followsapp.set(&apos;view engine&apos;, &apos;ejs&apos;);Create a route for your app.app.get(&apos;/&apos;, function(req, res)&#123; res.render(&apos;index&apos;,&#123;user: &quot;Great User&quot;,title:&quot;homepage&quot;&#125;); &#125;); 还记得我们之前在index.ejs中写的代码吗，我们已经把title和user的标签用&lt;%%&gt;符号绑定在页面里了，在这个渲染函数里，我们就要把这些参数传到ejs里面去。 大功告成，运行你的server.js 创建局部的视图到此为止，我们已经会使用动态的数据和渲染函数创建了一个单独的视图。现在试试创建嵌套的视图。 用如下代码重写index.js里的内容 12345678&lt;html&gt;&lt;head&gt;&lt;% include(&apos;header.ejs&apos;) %&gt;&lt;/head&gt;&lt;body&gt;&lt;% include(&apos;body.ejs&apos;) %&gt;&lt;/body&gt;&lt;/html&gt; 现在在文件夹里创建另外两个文件header.ejs 1234567&lt;title&gt;Hello World&lt;/title&gt;body.ejs&lt;div&gt;Welcome, Great User&lt;/div&gt; 启动服务器。现在你已经把局部视图（header.ejs）嵌入到主视图index.ejs里面去了. 使用javascript你可以使用javascript来实现ejs的模块化。下面看看如何实现。 在index.js里写入如下代码 12345&lt;ul&gt;&lt;% users.forEach(function(user)&#123; %&gt;&lt;%= user.name %&gt;&lt;% &#125;)%&gt;&lt;/ul&gt; 现在渲染index.ejs并把一个对象数组传到渲染函数里去。代码如下: 1234567app.get(&apos;/&apos;, function(req, res)&#123; res.render(&apos;index&apos;,[; &#123; name: &apos;John&apos; &#125;,; &#123; name: &apos;Mike&apos; &#125;,; &#123; name: &apos;Samantha&apos; &#125;; ]); &#125;); 这里使用的是数组传递到渲染对象并使用EJS列出每个用户的名字。 总结EJS使HTML和数据分离，而且大大加强了代码的重用。许多静态博客系统都使用了EJS模板。使整个网页目录结构更加干净清晰。","raw":null,"content":null,"categories":null,"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://yoursite.com/tags/Nodejs/"}]},{"title":"克隆数组","slug":null,"date":"2016-05-21T12:33:44.000Z","updated":null,"comments":null,"path":"2016/05/21/克隆数组/","link":null,"permalink":null,"excerpt":null,"keywords":null,"text":"1.浅表克隆1234567891011121314var person = new Person();var person.sex=&quot;male&quot;;var person.age=28;//创建一个新数组var oArray =[&quot;tom&quot;,person];var newArray = oArray.concat();//调用concat函数，返回一个新的数组对象.同样也可用slice函数document.write(oArray[1].age);//28document.write(newArray[1].age);//28person.age = 29;document.write(oArray[1].age);//29document.write(newArray[1].age);//29oArray[1].age = 30;document.write(person.age);//30document.write(newArray[1].age);//30 浅表克隆操作的是同一个引用 2.深度克隆123456/***@param _array 被克隆的数组*@param deep 定义是否深度克隆*@return Array 返回克隆的数组*@throws Error 参数数量不正确**/ 深度克隆，不断进行索引，复制原始数组中的所有对象，从而使新数组不再和原始数组指向同一个引用12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061function cloneArray(_array,deep)&#123; //如果参数数量为1，为浅表克隆 if(arguments.length==1) &#123; var isdeep=false; &#125; //否则为深表克隆 else if&#123; var isdeep = deep; &#125; //否则抛出报错 else&#123; throw new Error(&quot;参数数量不正确&quot;); return; &#125; //判断被克隆数组是否是数组对象，若是，返回[]，否则返回&#123;&#125;,并把返回值传给变量newArray var newArray = _array instanceof Array?[]:&#123;&#125;; if(isdeep) /*如果是深度克隆*/ &#123; //首先遍历该数组 for(var i in _array) &#123; var prop = _array[i];/*把数组里的元素指向变量prop*/ if(typeof prop ==&apos;object&apos;)/*如果该元素为对象*/ &#123; if(prop instanceof Array)/*如果该元素为数组对象，也就是数组中的数组,就要用push函数*/ &#123; var newArray[i] = [];/*创建数组newArray*/ for(var j = 0;j&lt;prop.length;j++)&#123; if(typeof prop[j]!=&apos;object&apos;)/*for循环里再次判断该数组里的元素是否为对象*/ &#123; newArray[i].push(prop[j]);/*如果不是对象了，就可以直接把元素push进newArray*/ &#125; else &#123; newArray[i].push(cloneArray(prop[j],true));/*如果还是对象，那就再次调用cloneArray函数进行递归，处理该对象并push进newArray*/ &#125; &#125; &#125; else /*如果是不是数组对象，而是其他类型的对象，不用push*/ &#123; newArray[i] = cloneArray(prop.true); &#125; &#125; else /*如果该元素不是对象*/ &#123; newArray[i] = prop; &#125; &#125; &#125; else /*如果不是深度克隆*/ &#123; newArray = _array.concat(); &#125; return newArray;&#125; 测试123456789101112131415//创建一个复杂数据类型作为数组元素var person = new Object();person.sex = &quot;male&quot;person.age = 28;var oArray =[&quot;jack&quot;,person];//克隆var newArray = cloneArray(oArray,true);document.write(oArray[1].age);/*28*/document.write(newArray[1].age);/*28*///改变指向的对象person.age = 27;document.write(oArray[1].age);/*27*/document.write(newArray[1].age);/*28*/ 3.深度克隆意义复制一个对象，改变原对象的属性，克隆的对象不受影响。例如在游戏引擎中，复制出一个模型，改变克隆出的模型的长宽高不会影响原模型的长宽高，这时就会用到深度克隆。","raw":null,"content":null,"categories":null,"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]}]